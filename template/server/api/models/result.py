# coding: utf-8

"""
    E2B Code Interpreter

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr
from pydantic import Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Result(BaseModel):
    """
    Result
    """  # noqa: E501

    text: Optional[StrictStr] = Field(
        default=None, description="Textual representation of the result"
    )
    html: Optional[StrictStr] = Field(
        default=None, description="HTML representation of the result"
    )
    markdown: Optional[StrictStr] = Field(
        default=None, description="Markdown representation of the result"
    )
    svg: Optional[StrictStr] = Field(
        default=None, description="SVG representation of the result"
    )
    png: Optional[StrictStr] = Field(
        default=None, description="PNG representation of the result"
    )
    jpeg: Optional[StrictStr] = Field(
        default=None, description="JPEG representation of the result"
    )
    pdf: Optional[StrictStr] = Field(
        default=None, description="PDF representation of the result"
    )
    latex: Optional[StrictStr] = Field(
        default=None, description="LaTeX representation of the result"
    )
    var_json: Optional[Union[str, Any]] = Field(
        default=None, description="JSON representation of the result", alias="json"
    )
    javascript: Optional[StrictStr] = Field(
        default=None, description="JavaScript representation of the result"
    )
    extra: Optional[Union[str, Any]] = Field(
        default=None, description="Extra representations of the result"
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "text",
        "html",
        "markdown",
        "svg",
        "png",
        "jpeg",
        "pdf",
        "latex",
        "json",
        "javascript",
        "extra",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "text": obj.get("text"),
                "html": obj.get("html"),
                "markdown": obj.get("markdown"),
                "svg": obj.get("svg"),
                "png": obj.get("png"),
                "jpeg": obj.get("jpeg"),
                "pdf": obj.get("pdf"),
                "latex": obj.get("latex"),
                "json": obj.get("json"),
                "javascript": obj.get("javascript"),
                "extra": obj.get("extra"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
